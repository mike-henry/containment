---
swagger: "2.0"
info: {}
basePath: "/"
tags:
- name: "containment"
- name: "hello-world"
- name: "sample2"
- name: "session"
schemes:
- "http"
paths:
  /containment/container/{name}:
    get:
      tags:
      - "containment"
      operationId: "remove"
      consumes:
      - "application/json"
      - "text/plain"
      produces:
      - "application/json"
      - "text/plain"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /containment/container/{name}:
    get:
      tags:
      - "containment"
      operationId: "getTree"
      consumes:
      - "application/json"
      - "text/plain"
      produces:
      - "application/json"
      - "text/plain"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ContainerView"
          headers: {}
        404
          description: "Not Found"

  /containment/container:
    post:
      tags:
      - "containment"
      operationId: "createTree"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      - "text/plain"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/definitions/ContainerView"
      responses:
        default:
          description: "successful operation"
  /containment/container/{name}:
    delete:
      tags:
      - "containment"
      operationId: "removeContainer"
      consumes:
      - "application/json"
      - "text/plain"
      produces:
      - "application/json"
      - "text/plain"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /hello-world:
    get:
      tags:
      - "hello-world"
      operationId: "sayHello"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Saying"
          headers: {}
  /hello-world2:
    get:
      tags:
      - "sample2"
      operationId: "sayHello"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Saying"
          headers: {}
  /session/create:
    post:
      tags:
      - "session"
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Credentials"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SessionToken"
          headers: {}
  /session/logout:
    post:
      tags:
      - "session"
      operationId: "close"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SessionToken"
      responses:
        default:
          description: "successful operation"
  /session/init:
    get:
      tags:
      - "session"
      operationId: "initialize"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "user"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/StartToken"
          headers: {}
definitions:
  ContainerView:
    type: "object"
    properties:
      children:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
      parent:
        type: "string"
      name:
        type: "string"
      type:
        type: "string"
  Saying:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        readOnly: true
      content:
        type: "string"
        readOnly: true
  SessionToken:
    type: "object"
    properties:
      token:
        type: "string"
  Credentials:
    type: "object"
    properties:
      user:
        type: "string"
      token:
        type: "string"
      password:
        type: "string"
  StartToken:
    type: "object"
    properties:
      token:
        type: "string"
